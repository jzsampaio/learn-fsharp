* https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/

** Problem

An array A consisting of N different integers is given. The array
contains integers in the range [1..(N + 1)], which means that exactly
one element is missing.

Your goal is to find that missing element.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A, returns the value of the missing element.

For example, given array A such that:

  A[0] = 2
  A[1] = 3
  A[2] = 1
  A[3] = 5
the function should return 4, as it is the missing element.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
the elements of A are all distinct;
each element of array A is an integer within the range [1..(N + 1)].


** Solution

#+begin_src fsharp :tangle "perm_missing_elem.fs"
  let solution xs =
      let elements = Set.ofList xs
      let expected = Set.ofList [1 .. (List.length xs)]
      expected - elements
      |> Set.maxElement

  solution [2; 3; 1; 5]
#+end_src

#+RESULTS:
: 4

* [[https://app.codility.com/programmers/lessons/3-time_complexity/frog_jmp/][FrogJmp]]

** Problem

A small frog wants to get to the other side of the road. The frog is
currently located at position X and wants to get to a position
*greater than or equal* to Y. The small frog always jumps a fixed
distance, D.

Count the minimal number of jumps that the small frog must perform to
reach its target.

Write a function:

class Solution { public int solution(int X, int Y, int D); }

that, given three integers X, Y and D, returns the minimal number of
jumps from position X to a position equal to or greater than Y.

For example, given:

  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:

after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Write an efficient algorithm for the following assumptions:

X, Y and D are integers within the range [1..1,000,000,000];
X ≤ Y.

** Solution

#+begin_src fsharp :tangle "frogjmp.fs"
  let solution startPosition finalPosition jumpSize =
      (finalPosition - startPosition) / (jumpSize)
      |> ceil
      |> int

  solution 10. 85. 30.
#+end_src

#+RESULTS:
: 3

* [[https://app.codility.com/programmers/lessons/13-fibonacci_numbers/fib_frog/][fib-frog]]

** Problem

The Fibonacci sequence is defined using the following recursive formula:

    F(0) = 0
    F(1) = 1
    F(M) = F(M - 1) + F(M - 2) if M >= 2

A small frog wants to get to the other side of a river. The frog is
initially located at one bank of the river (position −1) and wants to
get to the other bank (position N). The frog can jump over any
distance F(K), where F(K) is the K-th Fibonacci number. Luckily, there
are many leaves on the river, and the frog can jump between the
leaves, but only in the direction of the bank at position N.

The leaves on the river are represented in an array A consisting of N
integers. Consecutive elements of array A represent consecutive
positions from 0 to N − 1 on the river. Array A contains only 0s
and/or 1s:

0 represents a position without a leaf;
1 represents a position containing a leaf.

The goal is to count the minimum number of jumps in which the frog can
get to the other side of the river (from position −1 to position
N). The frog can jump between positions −1 and N (the banks of the
river) and every position containing a leaf.

For example, consider array A such that:

    A[0] = 0
    A[1] = 0
    A[2] = 0
    A[3] = 1
    A[4] = 1
    A[5] = 0
    A[6] = 1
    A[7] = 0
    A[8] = 0
    A[9] = 0
    A[10] = 0
The frog can make three jumps of length F(5) = 5, F(3) = 2 and F(5) = 5.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A consisting of N integers, returns the minimum
number of jumps by which the frog can get to the other side of the
river. If the frog cannot reach the other side of the river, the
function should return −1.

For example, given:

    A[0] = 0
    A[1] = 0
    A[2] = 0
    A[3] = 1
    A[4] = 1
    A[5] = 0
    A[6] = 1
    A[7] = 0
    A[8] = 0
    A[9] = 0
    A[10] = 0
the function should return 3, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000]; each element of array A
is an integer that can have one of the following values: 0, 1.

** Solution

#+begin_src fsharp :tangle "fibFrog.fsx"
  let rec fib N =
      match N with
          | 0 -> 1
          | 1 -> 1
          | x when x >= 1 -> fib(N-1) + fib(N-2)
          | _ -> failwith "N should be >= 0!"

  let isFib x =
      seq { 0..x }
      |> Seq.exists (fib >> ((=) x))

  let canJumpBetween (xs: int array) N a b =
      (a = -1 || xs.[a] = 1) && (b = N || xs.[b] = 1) && isFib (b - a)

  // returns list of possible next states
  let evolveState currentPos xs N history =
      let candidateJumps =
          [(currentPos + 1) .. N]
      candidateJumps
      |> List.filter (canJumpBetween xs N currentPos)
      |> List.map (fun x -> (x, x::history))

  let rec f (states: (int * (int list)) list) xs N (solutions: int list list) : int list list =
      match states with
          | (currentPosition, history) :: tail ->
              let newStates = evolveState currentPosition xs N history
              let newSolutions = if currentPosition = N then (history)::solutions else solutions
              f (newStates @ tail) xs N newSolutions
          | [] ->
              solutions

  let solution xs =
      let N = Array.length xs
      f [(-1, [-1])] xs N []
      |> List.map List.rev


  let solution2 xs =
      xs
      |> solution
      |> List.map List.length
      |> List.max

  let input = [|
               1
               0
               0
               1
               1
               0
               1
               0
               0
               0
               0 |]

  solution input
#+end_src

#+RESULTS:
:   [[-1, 4, 6, 11], [-1, 0, 3, 11], [-1, 0, 3, 6, 11], [-1, 0, 3, 4, 6, 11]]
